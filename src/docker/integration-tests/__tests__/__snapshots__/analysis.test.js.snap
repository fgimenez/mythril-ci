// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`/mythril/v1/analysis Submit issues 1`] = `
Array [
  Object {
    "address": 499,
    "contract": "MAIN",
    "debug": "callvalue: 0x57f25cd000000000000000000000000000000000000000000000000000000000
storage_keccac_1461501637330902918203684832716283019655932542975_&
1461501637330902918203684832716283019655932542975_&
1461501637330902918203684832716283019655932542975_&
calldata_MAIN[4]: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe
calldata_MAIN[0]: 0x362a9500000000000000000000000000000000000000000000000000000000
calldatasize_MAIN: 0x4
",
    "description": "A possible integer overflow exists in the function \`fallback()\`.
The addition or multiplication may result in a value higher than the maximum representable integer.",
    "function": "fallback()",
    "title": "Integer Overflow",
    "type": "Warning",
  },
  Object {
    "address": 648,
    "contract": "MAIN",
    "debug": "",
    "description": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
    "function": "_function_0x2e1a7d4d",
    "title": "Message call to external contract",
    "type": "Warning",
  },
  Object {
    "address": 648,
    "contract": "MAIN",
    "debug": "",
    "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.
Consecutive calls: 
Call at address: 823
",
    "function": "_function_0x2e1a7d4d",
    "title": "Multiple Calls",
    "type": "Information",
  },
  Object {
    "address": 728,
    "contract": "MAIN",
    "debug": "",
    "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
    "function": "_function_0x2e1a7d4d",
    "title": "State change after external call",
    "type": "Warning",
  },
  Object {
    "address": 823,
    "contract": "MAIN",
    "debug": "",
    "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
    "function": "_function_0x2e1a7d4d",
    "title": "Message call to external contract",
    "type": "Informational",
  },
  Object {
    "address": 823,
    "contract": "MAIN",
    "debug": "",
    "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.",
    "function": "_function_0x2e1a7d4d",
    "title": "Unchecked CALL return value",
    "type": "Informational",
  },
  Object {
    "address": 829,
    "contract": "MAIN",
    "debug": "",
    "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.",
    "function": "_function_0x2e1a7d4d",
    "title": "Unchecked CALL return value",
    "type": "Informational",
  },
]
`;
